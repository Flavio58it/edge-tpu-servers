"""
Train an SVM face classifier from 128-d face encodings.

Part of the smart-zoneminder project:
See https://github.com/goruck/smart-zoneminder.

Copyright (c) 2019 Lindo St. Angel
"""

from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix 
import pickle

# Path to known face encodings.
# The pickle file needs to be generated by the 'encode_faces.py' program first.
KNOWN_FACE_ENCODINGS_PATH = './encodings.pickle'
# Path to save model to. 
SVM_MODEL_PATH = './face_recognizer.pickle'
# Path to save label encoder to. 
SVM_LABEL_PATH = './face_labels.pickle'

# Load the known faces and embeddings.
with open(KNOWN_FACE_ENCODINGS_PATH, 'rb') as fp:
    data_pickle = pickle.load(fp)

# Encodings are stored as arrays, convert to list.
data = [i.tolist() for i in data_pickle['encodings']]
#print('data {}'.format(data['encodings'])

# Encode the labels.
print('Encoding labels...')
le = LabelEncoder()
labels = le.fit_transform(data_pickle['names'])
#print('labels {}'.format(labels))

def svc_param_selection(X, y, nfolds):
    # Exhaustive search over specified parameter values for svm.
    Cs = [0.001, 0.01, 0.1, 1, 10, 100]
    gammas = [0.001, 0.01, 0.1, 1, 10, 100]
    param_grid = [
        {'C': Cs, 'kernel': ['linear']},
        {'C': Cs, 'gamma': gammas, 'kernel': ['rbf']}]
    grid_search = GridSearchCV(SVC(), param_grid, iid=False, cv=nfolds)
    grid_search.fit(X, y)
    return grid_search.best_params_

# Split data up into train and test sets.
(X_train, X_test, y_train, y_test) = train_test_split(data, labels, test_size=0.20)
#print('X_train: {} X_test: {} y_train: {} y_test: {}'.format(X_train, X_test, y_train, y_test))

# Find best parameters.
print('Finding best parameters...')
best = svc_param_selection(X_train, y_train, 15)
best_C = best['C']
best_gamma = best.get('gamma', 'auto_deprecated')
best_kernel = best['kernel']
print('kernel: {} C: {}, gamma: {}'.format(best_kernel, best_C, best_gamma))

# Train the model used to accept the 128-d embeddings of the face and
# then produce the actual face recognition model. 
print('Training model...')
recognizer = SVC(C=best_C, kernel=best_kernel, gamma=best_gamma, probability=True)
recognizer.fit(X_train, y_train)

# Evaluate model.
print('Evaluating model...')
y_pred = recognizer.predict(X_test)
print('Confusion matrix:')
print(confusion_matrix(y_test, y_pred))
print('Classification matrix:')
print(classification_report(y_test, y_pred))

# Write the face recognition model to disk.
print('Saving model...')
with open(SVM_MODEL_PATH, 'wb') as outfile:
    outfile.write(pickle.dumps(recognizer))

# Write the label encoder to disk.
print('Saving label encoder...')
with open(SVM_LABEL_PATH, 'wb') as outfile:
    outfile.write(pickle.dumps(le))